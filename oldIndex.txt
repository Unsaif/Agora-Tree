// set the dimensions and margins of the graph
var margin = {top: 0, right: 0, bottom: 0, left: 0},
width = screen.width + margin.top;
height = screen.height
outerRadius = width / 2
innerRadius = outerRadius - 200


// append the svg object to the body of the page
var svg = d3.select("#Tree")
    .append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    .append("g")
    .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")")

legend = svg => {
    const g = svg
        .attr("class", "legend")
        .selectAll("g")
        .data(color.domain())
        .join("g")
        .attr("class", "legend-labels")
        .attr("transform", (d, i) => `translate(${-outerRadius - 50 },${-outerRadius + i * 20})`);
    
    g.append("rect")
        .attr("width", 18) 
        .attr("height", 18)
        .attr("fill", color)
        .attr("opacity", 0)
        .transition()
        .duration(2000)
        .attr("opacity", 1);
    
    legendText = g.append("text")
        .attr("x", 24) 
        .attr("y", 9)
        .attr("dy", "0.35em") 
        .attr("opacity", 0)
        .text(d => d)
        .style("cursor", "pointer")     

    legendText
        .transition()
        .duration(2000)
        .attr("opacity", 1)

    legendText
        .on("mouseover", mouseoveredColor(true))
        .on("mouseout", d => {mouseoveredColor(false); d3.selectAll("text").style("fill", "black")})
        .on("click", function(d) {update(d.srcElement.innerHTML, "y")});
    }

cluster = d3.cluster()
    .size([360, innerRadius])
    .separation((a, b) => 1)

color = d3.scaleOrdinal()
    .domain(["Archaea", "Synergistetes", "Spirochaetes", "Bacteroidetes/Chlorobi_group", "Alphaproteobacteria", "Betaproteobacteria", "delta/epsilon_subdivisions", "Gammaproteobacteria", "Tenericutes", "Fusobacteria", "Actinobacteria", "Tissierellia", "Erysipelotrichia", "Negativicutes", "Clostridia", "Bacillales", "Lactobacillales"])
    .range(['#17becf', '#bcbd22', '#7f7f7f', '#e377c2', '#8c564b', '#9467bd', '#d62728', '#2ca02c', '#ff7f0e', '#1f77b4', '#666666', '#a6761d', '#e6ab02', '#66a61e', '#e7298a', '#7570b3', '#d95f02', '#1b9e77'])


const zoom = d3.zoom()
    .on('zoom', (event) => {
      svg.attr('transform', event.transform);
    })
    .scaleExtent([1, 40]);

d3.select("svg")
    .attr("viewBox", [-outerRadius, -outerRadius, width, width])
    .attr("font-family", "sans-serif")
    .attr("font-size", 10)
    .call(zoom)
    .on("dblclick", () => update("", "n"));

function update(name, transition) {

    d3.text("life.txt").then(function(text) {

        newData = parseNewick(text, name)

        if (d3.selectAll(".legend-labels").size() === 0 && name !== ""){
            svg
                .append("g")
                .call(legend);
        }
        else if (d3.selectAll(".legend-labels").size() === 17 && name === ""){
            d3
                .select(".legend")
                .selectAll("text")
                .transition()
                .duration(2000)
                .attr("opacity", 0)
                .remove()
            
            d3
                .select(".legend")
                .selectAll("rect")
                .transition()
                .duration(2000)
                .attr("opacity", 0)
                .remove()

            d3
                .select(".legend")
                .transition()
                .duration(2000)
                .remove()
        }

        d3
            .selectAll("path")
            .remove();

        d3
            .selectAll(".treeText")
            .selectAll("text")
            .remove();

        d3
            .selectAll(".radialOpeningText")
            .selectAll("text")
            .filter(function(d) { return d === name})
            .transition()
            .duration(1000)
            .attr("opacity", 0)
            .remove()

        d3
            .selectAll(".radialOpeningText")
            .selectAll("text")
            .filter(function(d) { return d !== name})
            .remove()

        updateChart(newData, name, transition)
    })

}

function mouseovered(active) {
    return function(event, d) {
        d3.select(this).classed("label--active", active);
        d3.select(d.linkExtensionNode).classed("link-extension--active", active).raise();
        do d3.select(d.linkNode).classed("link--active", active).raise();
        while (d = d.parent);   
    };
}

function mouseoveredColor(active) {
    return function(event, d) {
        d3.select(this).style("fill", color(d))
    };
}

function findObjectByName(obj, name) {
    if(obj.name === name) { return obj; }
    for(var i in obj.branchset) {
      var foundName = findObjectByName(obj.branchset[i], name);
      if(foundName) { return foundName}; 
      }
    return null;
}


// Compute the maximum cumulative length of any node in the tree.
function maxLength(d) {
    return d.data.length + (d.children ? d3.max(d.children, maxLength) : 0);
}

// Set the radius of each node by recursively summing and scaling the distance from the root.
function setRadius(d, y0, k) {
    d.radius = (y0 += d.data.length) * k;
    if (d.children) d.children.forEach(d => setRadius(d, y0, k));
}

// Set the color of each node by recursively inheriting.
function setColor(d) {
    var name = d.data.name;
    d.color = color.domain().indexOf(name) >= 0 ? color(name) : d.parent ? d.parent.color : null;
    if (d.children) d.children.forEach(setColor);
}

function linkVariable(d) {
    return linkStep(d.source.x, d.source.radius, d.target.x, d.target.radius);
}

function linkConstant(d) {
    return linkStep(d.source.x, d.source.y, d.target.x, d.target.y);
}

function linkExtensionVariable(d) {
    return linkStep(d.target.x, d.target.radius, d.target.x, innerRadius);
  }

function linkExtensionConstant(d) {
    return linkStep(d.target.x, d.target.y, d.target.x, innerRadius);
  }

function linkStep(startAngle, startRadius, endAngle, endRadius) {
    const c0 = Math.cos(startAngle = (startAngle - 90) / 180 * Math.PI);
    const s0 = Math.sin(startAngle);
    const c1 = Math.cos(endAngle = (endAngle - 90) / 180 * Math.PI);
    const s1 = Math.sin(endAngle);
    return "M" + startRadius * c0 + "," + startRadius * s0
        + (endAngle === startAngle ? "" : "A" + startRadius + "," + startRadius + " 0 0 " + (endAngle > startAngle ? 1 : 0) + " " + startRadius * c1 + "," + startRadius * s1)
        + "L" + endRadius * c1 + "," + endRadius * s1;
}

// https://github.com/jasondavies/newick.js
function parseNewick(a, b){for(var e=[],r={},s=a.split(/\s*(;|\(|\)|,|:)\s*/),t=0;t<s.length;t++){var n=s[t];switch(n){case"(":var c={};r.branchset=[c],e.push(r),r=c;break;case",":var c={};e[e.length-1].branchset.push(c),r=c;break;case")":r=e.pop();break;case":":break;default:var h=s[t-1];")"==h||"("==h||","==h?r.name=n:":"==h&&(r.length=parseFloat(n))}} return findObjectByName(r, b)}

//Initialise
d3.text("life.txt").then(function(text) {
    data = parseNewick(text, "")
    updateChart(data, "", "y")
});

